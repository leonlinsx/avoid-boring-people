---
import BaseLayout from "../../layouts/BaseLayout.astro";
import PostCard from "../../components/PostCard.astro";
import { getCollection } from "astro:content";
import readingTime from "reading-time";
import { SITE_TITLE } from "../../consts";

// Load all posts
const all = await getCollection("blog");

// Compute reading time + safe slug + sort newest first
const posts = all
  .map((p) => ({
    ...p,
    slug: p.id.replace(/\.md$/, ""),
    data: {
      ...p.data,
      readingTime: Math.max(1, Math.round(readingTime(p.body ?? "").minutes)),
    },
  }))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Query params
const url = new URL(Astro.request.url);
const active = url.searchParams.get("category") ?? "All";
const currentPage = Number(url.searchParams.get("page")) || 1;

// Normalize case
const normalize = (str: string) => (str || "").trim().toLowerCase();

// Build categories
const categories = [
  "All",
  ...Array.from(new Set(posts.map((p) => p.data.category?.trim() || ""))).sort(
    (a, b) => a.localeCompare(b)
  ),
].filter(Boolean);

// Filter by category
const filtered =
  active === "All"
    ? posts
    : posts.filter(
        (p) => normalize(p.data.category || "") === normalize(active)
      );

// Pagination helper
function paginateArray(array, page = 1, pageSize = 8) {
  const totalPages = Math.ceil(array.length / pageSize);
  const start = (page - 1) * pageSize;
  const end = start + pageSize;
  return {
    data: array.slice(start, end),
    page,
    totalPages,
  };
}

const PAGE_SIZE = 8;
const pagination = paginateArray(filtered, currentPage, PAGE_SIZE);
const pagedPosts = pagination.data;
const page = pagination.page;
const totalPages = pagination.totalPages;
---

<BaseLayout
  title={`Writing | ${SITE_TITLE}`}
  description="All essays and posts by Leon Lin on finance, tech, books, lifestyle, and more."
>
  <div
    style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; gap: 2rem;"
  >
    <h1 style="margin: 0;">Essays, Notes, and More</h1>
    <!-- Search -->
    <form id="search-form" style="position: relative; min-width: 240px;">
      <input
        type="search"
        id="search-box"
        name="q"
        placeholder="Search..."
        aria-label="Search posts"
      />
      <button
        type="submit"
        style="position: absolute; right: 0.5rem; top: 50%; transform: translateY(-50%); background: none; border: none; cursor: pointer; color: var(--color-link); font-size: 1.2rem;"
      >
        üîç
      </button>
    </form>
  </div>

  <script type="module">
    document
      .getElementById("search-form")
      .addEventListener("submit", function (e) {
        e.preventDefault();
        const q = document.getElementById("search-box").value.trim();
        if (q) {
          window.location.href = `/search?q=${encodeURIComponent(q)}`;
        } else {
          window.location.href = "/search";
        }
      });
  </script>

  <p class="subtext">
    Thinking out loud about finance, technology, and how we work and live.
  </p>

  <!-- Categories -->
  <nav class="filters" aria-label="Filter posts by category">
    {
      categories.map((cat) => {
        const params = [];
        if (cat !== "All") params.push(`category=${encodeURIComponent(cat)}`);
        const paramString = params.length ? `?${params.join("&")}` : "";
        return (
          <a
            href={`/writing${paramString}`}
            class={`filter-link ${active === cat ? "is-active" : ""}`}
          >
            {cat}
          </a>
        );
      })
    }
  </nav>

  <!-- Posts -->
  <div id="post-list">
    {pagedPosts.map((post: any) => <PostCard post={post} />)}
  </div>

  <!-- Pagination -->
  {
    totalPages > 1 && (
      <nav class="pagination" aria-label="Pagination">
        {Array.from({ length: totalPages }, (_, i) => {
          const pageNum = i + 1;
          const params = [];
          if (active !== "All")
            params.push(`category=${encodeURIComponent(active)}`);
          if (pageNum !== 1) params.push(`page=${pageNum}`);
          const paramString = params.length ? `?${params.join("&")}` : "";
          return (
            <a
              href={`/writing${paramString}`}
              class={`page-link ${pageNum === page ? "is-active" : ""}`}
              aria-current={pageNum === page ? "page" : undefined}
            >
              {pageNum}
            </a>
          );
        })}
      </nav>
    )
  }
</BaseLayout>

<style>
  .filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 0 0 1.5rem 0;
  }

  .filter-link {
    display: inline-block;
    padding: 0.35rem 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: 999px;
    color: var(--color-text);
    text-decoration: none;
    font-size: 0.95rem;
    transition:
      color 0.2s,
      border-color 0.2s,
      background-color 0.2s;
  }

  .filter-link:hover {
    border-color: var(--color-link);
    color: var(--color-link);
  }

  .filter-link.is-active {
    background: var(--color-link);
    border-color: var(--color-link);
    color: #fff;
    font-weight: 600;
  }

  .pagination {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin: 2rem 0;
  }

  .page-link {
    display: inline-block;
    padding: 0.35rem 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    color: var(--color-text);
    text-decoration: none;
  }

  .page-link:hover {
    border-color: var(--color-link);
    color: var(--color-link);
  }

  .page-link.is-active {
    background: var(--color-link);
    border-color: var(--color-link);
    color: #fff;
    font-weight: 600;
  }
</style>

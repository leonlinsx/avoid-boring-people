---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import FormattedDate from "../components/FormattedDate.astro";
import PostCard from "../components/PostCard.astro";
import { SITE_BANNER_IMAGE } from "../consts";
import { enrichPost } from "../utils/text";
import TableOfContents from "../components/TableOfContents.astro";

interface Heading {
  level: number;
  id: string;
  text: string;
}

// Astro passes only the frontmatter as props
type Props = CollectionEntry<"blog">["data"];
const raw = Astro.props;
const { headings = [] } = raw;

// ✅ Rebuild a "full post" object with body so enrichPost can compute readingTime
const body = await Astro.slots.render("default");
const current = enrichPost({
  id: "", // slug/id not needed for this page
  slug: "",
  body,
  data: raw,
} as any);

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  category,
  readingTime,
} = current.data;

// Normalize hero image
let hero: string | Record<string, any> = SITE_BANNER_IMAGE;
if (heroImage) {
  if (typeof heroImage === "object" && heroImage.src) {
    hero = heroImage;
  } else if (typeof heroImage === "string") {
    hero = heroImage;
  }
}

// Related posts (also enriched)
const allPosts = await getCollection("blog");
const related = allPosts
  .filter((p) => p.data.category === category && p.data.title !== title)
  .map(enrichPost)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .slice(0, 3);
---

<BaseLayout
  title={title}
  description={description}
  image={typeof hero === "object" ? hero.src : hero}
>
  <main>
    <article>
      {
        hero && (
          <div class="hero-image">
            {typeof hero === "object" && hero.src ? (
              <Image
                src={hero}
                alt={title}
                format="webp"
                width={1200}
                height={630}
                fit="cover"
                loading="eager"
                fetchpriority="high"
                decoding="async"
              />
            ) : (
              <img
                src={hero as string}
                alt={title}
                width="1200"
                height="630"
                loading="eager"
                fetchpriority="high"
                decoding="async"
              />
            )}
          </div>
        )
      }

      <div class="prose">
        <div class="title">
          <div class="meta">
            <FormattedDate date={pubDate} />
            {category && ` · ${category}`}
            {readingTime && ` · ${readingTime} min read`}
            {
              updatedDate && (
                <div class="last-updated-on">
                  Last updated on <FormattedDate date={updatedDate} />
                </div>
              )
            }
          </div>
          <h1>{title}</h1>
        </div>

        <!-- TOC -->
        <TableOfContents headings={headings} />

        <!-- Post content -->
        <slot />

        <!-- Newsletter CTA -->
        <section class="newsletter-cta">
          <h2>Enjoyed this post?</h2>
          <p>Get my next essays in your inbox:</p>
          <iframe
            src="https://avoidboringpeople.substack.com/embed"
            width="100%"
            height="150"
            style="border:1px solid #EEE; background:white; max-width: 600px; margin: 0 auto; display: block;"
            frameborder="0"
            scrolling="no"></iframe>
        </section>

        <!-- Related posts -->
        {
          related.length > 0 && (
            <section class="related-posts">
              <h2>Related Posts</h2>
              {related.map((p) => (
                <PostCard post={p} />
              ))}
            </section>
          )
        }
      </div>
    </article>
  </main>
</BaseLayout>

<style>
  .hero-image {
    max-width: 1100px;
    margin: 0 auto 2rem auto;
  }
  .hero-image img,
  .hero-image :global(img) {
    width: 100%;
    max-width: 100%;
    height: auto;
    display: block;
    border-radius: 12px;
    box-shadow: var(--box-shadow);
  }
  .title {
    margin-bottom: 2rem;
    text-align: center;
    line-height: 1.4;
  }
  .meta {
    margin-bottom: 0.75rem;
    font-size: 0.95rem;
    color: rgb(var(--gray));
  }
  .last-updated-on {
    font-style: italic;
  }
  .title h1 {
    position: relative;
    margin-bottom: 1.5rem;
    padding-bottom: 0.75rem;
  }
  .title h1::after {
    content: "";
    display: block;
    margin: 0.75rem auto 0 auto;
    width: 100%;
    height: 1px;
    background-color: #ddd;
  }
  .newsletter-cta,
  .related-posts {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
    text-align: center;
  }
  .related-posts h2 {
    margin-bottom: 1rem;
    text-align: left;
  }
</style>

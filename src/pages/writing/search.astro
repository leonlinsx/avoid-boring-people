---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/PostCard.astro';
import { getCollection } from 'astro:content';
import { SITE_OG_IMAGE, SITE_TITLE } from '../../consts';
import SearchBar from '../../components/SearchBar.astro';
import { enrichPost } from '../../utils/text';
import { searchPosts } from '../../utils/search';

const q = Astro.url?.searchParams.get('q')?.trim() ?? '';

// Fetch and enrich all posts
const allPosts = await getCollection('blog');

const posts = allPosts
  .map(enrichPost)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const filteredPosts = q ? searchPosts(posts, q) : posts;
const searchItems = posts.map((post) => ({
  id: post.id,
  slug: post.slug ?? post.id.replace(/\/index\.md$/, ''),
  title: post.data.title ?? 'Untitled',
  description: post.data.description ?? '',
  category: post.data.category ?? '',
  pubDate: post.data.pubDate ? post.data.pubDate.toISOString() : null,
  readingTime: typeof post.data.readingTime === 'number' ? post.data.readingTime : null,
  heroImage:
    typeof post.data.heroImage === 'string'
      ? { kind: 'external', src: post.data.heroImage }
      : post.data.heroImage
      ? {
          kind: 'asset',
          src: post.data.heroImage.src,
          width: post.data.heroImage.width,
          height: post.data.heroImage.height,
        }
      : null,
  fallbackImage: SITE_OG_IMAGE,
}));
---

<BaseLayout
  title={`Search | ${SITE_TITLE}`}
  description={
    q ? `Search results for "${q}"` : `Search the full ${SITE_TITLE} archive`
  }
>
  <div class="search-header">
    <h1>Search Results</h1>
    <SearchBar q={q} id="client-search-input" variant="full" />
  </div>

  <div id="post-list">
    {filteredPosts.map((post) => (
      <PostCard post={post} />
    ))}
  </div>

  <p
    id="search-empty"
    class:list={['search-empty', filteredPosts.length === 0 && q ? 'is-visible' : '']}
    role="status"
    aria-live="polite"
  >
    No posts found for “{q}”. Try a different keyword.
  </p>
  <script type="application/json" id="search-data">
    {JSON.stringify(searchItems).replace(/</g, '\\u003c')}
  </script>
  <script type="module">
    import Fuse from 'fuse.js';

    const input = document.getElementById('client-search-input');
    const postList = document.getElementById('post-list');
    const emptyState = document.getElementById('search-empty');
    const dataEl = document.getElementById('search-data');

    if (!input || !postList || !dataEl) {
      console.error('Search page assets failed to load');
    } else {
      const postsData = JSON.parse(dataEl.textContent || '[]');
      const fuse = new Fuse(postsData, {
        keys: ['title', 'description', 'category'],
        threshold: 0.3,
      });

      const urlParams = new URLSearchParams(window.location.search);
      const initialQuery = urlParams.get('q')?.trim() || '';

      if (initialQuery) {
        input.value = initialQuery;
        runSearch(initialQuery, false);
      } else {
        renderPosts(postsData);
        updateEmptyState(postsData.length > 0, '');
      }

      input.addEventListener('input', (e) => {
        const target = e.target;
        const query = typeof target?.value === 'string' ? target.value.trim() : '';
        runSearch(query, true);
      });

      function runSearch(query, updateHistory) {
        const results = query
          ? fuse.search(query).map((result) => result.item)
          : postsData;

        renderPosts(results);
        updateEmptyState(results.length > 0, query);

        if (updateHistory) {
          const nextUrl = new URL(window.location.href);
          if (query) {
            nextUrl.searchParams.set('q', query);
          } else {
            nextUrl.searchParams.delete('q');
          }
          window.history.replaceState({}, '', nextUrl);
        }
      }

      function renderPosts(items) {
        const fragment = document.createDocumentFragment();
        items.forEach((post) => {
          fragment.appendChild(createPostCard(post));
        });
        postList.replaceChildren(fragment);
      }

      function createPostCard(post) {
        const article = document.createElement('article');
        article.className = 'post-card';
        article.dataset.postId = post.id;

        const href = `/writing/${post.slug}/`;

        const thumbLink = document.createElement('a');
        thumbLink.href = href;
        thumbLink.className = 'thumb-link';

        const thumb = document.createElement('img');
        const hero = post.heroImage;
        if (hero && hero.kind === 'asset') {
          thumb.src = hero.src;
          thumb.width = hero.width || 120;
          thumb.height = hero.height || 80;
        } else if (hero && hero.kind === 'external') {
          thumb.src = hero.src;
          thumb.width = 120;
          thumb.height = 80;
        } else {
          thumb.src = post.fallbackImage;
          thumb.width = 120;
          thumb.height = 80;
        }
        thumb.alt = `Thumbnail for ${post.title}`;
        thumb.className = 'post-thumb';
        thumb.loading = 'lazy';

        thumbLink.appendChild(thumb);
        article.appendChild(thumbLink);

        const content = document.createElement('div');
        content.className = 'post-content';

        const titleEl = document.createElement('h2');
        titleEl.className = 'post-title';
        const titleLink = document.createElement('a');
        titleLink.href = href;
        titleLink.textContent = post.title;
        titleEl.appendChild(titleLink);
        content.appendChild(titleEl);

        if (post.description) {
          const summary = document.createElement('p');
          summary.className = 'post-summary';
          summary.textContent = post.description;
          content.appendChild(summary);
        }

        const meta = document.createElement('p');
        meta.className = 'post-meta';
        const parts = [];
        if (post.category) parts.push(post.category);
        if (post.pubDate) {
          const formatter = new Intl.DateTimeFormat('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
          });
          parts.push(formatter.format(new Date(post.pubDate)));
        }
        if (post.readingTime) {
          parts.push(`${post.readingTime} min read`);
        }
        meta.textContent = parts.join(' · ');
        content.appendChild(meta);

        article.appendChild(content);
        return article;
      }

      function updateEmptyState(hasResults, query) {
        if (!emptyState) return;
        emptyState.classList.toggle('is-visible', !hasResults && Boolean(query));
      }
    }
  </script>
</BaseLayout>

<style>
  .search-header {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: 1rem;
    margin-bottom: 2rem;
    width: 100%;
  }
  .search-bar {
    display: flex;
    align-items: center;
    width: 100%;
    max-width: none;
    background: var(--color-bg);
    border: 1.5px solid var(--color-border);
    border-radius: 999px;
    padding: 0.25rem 0.75rem 0.25rem 1rem;
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.03);
  }
  .search-input {
    flex: 1;
    padding: 0.35rem 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: 999px;
    font-size: 0.95rem;
    width: 100%;
    box-sizing: border-box;
    color: var(--color-text);
    background: transparent;
    caret-color: var(--color-text);
  }
  .search-btn {
    padding: 0.35rem 0.75rem;
    border-radius: 999px;
    border: none;
    background: transparent;
    color: var(--color-text);
    font-weight: 600;
    cursor: pointer;
    transition: opacity 0.2s;
    flex-shrink: 0;
  }
  .search-btn:hover {
    opacity: 0.85;
  }
  #post-list {
    display: grid;
    gap: 1.5rem;
    width: 100%;
  }
  .search-empty {
    display: none;
    margin-top: 1.5rem;
    font-style: italic;
    color: var(--color-text-dimmed);
  }
  .search-empty.is-visible {
    display: block;
  }
</style>

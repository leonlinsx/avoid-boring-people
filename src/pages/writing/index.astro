---
import BaseLayout from "../../layouts/BaseLayout.astro";
import PostCard from "../../components/PostCard.astro";
import { getCollection } from "astro:content";
import readingTime from "reading-time";
import { SITE_TITLE } from "../../consts";

// Load all posts
const all = await getCollection("blog");

// Compute reading time + keep slug + sort newest first
const posts = all
  .map((p) => ({
    ...p,
    slug: p.slug ?? p.id.replace(/\.md$/, ""), // safe slug for PostCard links
    data: {
      ...p.data,
      readingTime: Math.max(1, Math.round(readingTime(p.body ?? "").minutes)),
    },
  }))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Category logic
const url = new URL(Astro.request.url);
const active = url.searchParams.get("category") ?? "All";

// Normalizer for comparisons
const normalize = (str: string) => str.trim().toLowerCase();

// Build dynamic category list
const categories = [
  "All",
  ...Array.from(new Set(posts.map((p) => p.data.category?.trim() || ""))).sort(
    (a, b) => a.localeCompare(b)
  ),
].filter(Boolean); // remove empty strings if any

const filtered =
  active === "All"
    ? posts
    : posts.filter(
        (p) => normalize(p.data.category || "") === normalize(active)
      );
---

<BaseLayout
  title={`Writing | ${SITE_TITLE}`}
  description="All essays and posts by Leon Lin on finance, tech, books, lifestyle, and more."
>
  <div
    style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; gap: 2rem;"
  >
    <h1 style="margin: 0;">Essays, Notes, and More</h1>
    <form id="search-form" style="position: relative; min-width: 240px;">
      <input
        type="search"
        id="search-box"
        name="q"
        placeholder="Search..."
        style="padding: 0.5rem 2.5rem 0.5rem 0.75rem; border-radius: 999px; border: 1px solid var(--color-border); font-size: 1rem; width: 100%; min-width: 200px;"
        aria-label="Search posts"
      />
      <button
        type="submit"
        style="position: absolute; right: 0.5rem; top: 50%; transform: translateY(-50%); background: none; border: none; cursor: pointer; color: var(--color-link); font-size: 1.2rem;"
      >
        üîç
      </button>
    </form>
  </div>
  <script type="module">
    document
      .getElementById("search-form")
      .addEventListener("submit", function (e) {
        e.preventDefault();
        const q = document.getElementById("search-box").value.trim();
        if (q) {
          window.location.href = `/search?q=${encodeURIComponent(q)}`;
        } else {
          window.location.href = "/search";
        }
      });
  </script>
  <p class="subtext">
    Thinking out loud about finance, technology, and how we work and live.
  </p>

  <!-- Category Filters -->
  <nav class="filters" aria-label="Filter posts by category">
    {
      categories.map((cat) => (
        <button
          type="button"
          class="filter-link"
          data-category={cat}
          aria-pressed={cat === "All"}
        >
          {cat}
        </button>
      ))
    }
  </nav>

  <!-- Post List -->
  <div id="post-list">
    {
      posts.map((post) => (
        <div
          class="post-card-wrapper"
          data-category={post.data.category || ""}
          style="display: block;"
        >
          <PostCard post={post} />
        </div>
      ))
    }
  </div>

  <script type="module">
    const normalize = (str) => (str || "").trim().toLowerCase();
    const buttons = Array.from(document.querySelectorAll(".filter-link"));
    const posts = Array.from(document.querySelectorAll(".post-card-wrapper"));
    buttons.forEach((btn) => {
      btn.addEventListener("click", () => {
        const cat = btn.getAttribute("data-category");
        buttons.forEach((b) => b.classList.toggle("is-active", b === btn));
        posts.forEach((post) => {
          const postCat = post.getAttribute("data-category");
          if (cat === "All" || normalize(postCat) === normalize(cat)) {
            post.style.display = "block";
          } else {
            post.style.display = "none";
          }
        });
      });
    });
    // Set initial state to All
    buttons[0]?.click();
  </script>
</BaseLayout>

<style>
  .filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 0 0 1.5rem 0;
  }

  .filter-link {
    display: inline-block;
    padding: 0.35rem 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: 999px;
    color: var(--color-text);
    text-decoration: none;
    font-size: 0.95rem;
    transition:
      color 0.2s,
      border-color 0.2s,
      background-color 0.2s;
  }

  .filter-link:hover {
    border-color: var(--color-link);
    color: var(--color-link);
  }

  .filter-link.is-active {
    background: var(--color-link);
    border-color: var(--color-link);
    color: #fff;
    font-weight: 600;
  }
</style>

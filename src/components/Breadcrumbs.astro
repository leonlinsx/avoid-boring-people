---
import { SITE_URL } from '../consts';

interface BreadcrumbItem {
  label: string;
  href?: string;
}

const { items = [] } = Astro.props as { items: BreadcrumbItem[] };

const breadcrumbList = items.map((item, index) => ({
  '@type': 'ListItem',
  position: index + 1,
  name: item.label,
  item: item.href ? new URL(item.href, SITE_URL).toString() : undefined,
}));
---

{items.length > 1 && (
  <nav class="breadcrumbs" aria-label="Breadcrumb">
    <ol>
      {items.map((item, index) => {
        const isLast = index === items.length - 1;
        return (
          <li>
            {item.href && !isLast ? (
              <a href={item.href}>{item.label}</a>
            ) : (
              <span aria-current="page">{item.label}</span>
            )}
          </li>
        );
      })}
    </ol>
    <script is:inline type="application/ld+json">
      {JSON.stringify({
        '@context': 'https://schema.org',
        '@type': 'BreadcrumbList',
        itemListElement: breadcrumbList,
      })}
    </script>
  </nav>
)}

<style>
  .breadcrumbs {
    margin: 0 0 var(--space-md) 0;
    font-size: 0.9rem;
    color: var(--color-text-muted);
  }

  .breadcrumbs ol {
    list-style: none;
    display: flex;
    flex-wrap: wrap;
    gap: 0.35rem;
    margin: 0;
    padding: 0;
  }

  .breadcrumbs li {
    display: inline-flex;
    align-items: center;
    gap: 0.35rem;
  }

  .breadcrumbs li::after {
    content: '/';
    margin-left: 0.35rem;
    color: var(--color-text-muted);
  }

  .breadcrumbs li:last-child::after {
    content: '';
  }

  .breadcrumbs a {
    color: var(--color-link);
    text-decoration: none;
  }

  .breadcrumbs a:hover {
    text-decoration: underline;
  }

  .breadcrumbs [aria-current='page'] {
    color: var(--color-text);
    font-weight: 600;
  }
</style>

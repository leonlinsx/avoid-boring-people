---
import type { MarkdownHeading } from "astro";

type Props = {
  headings?: MarkdownHeading[];
};

const { headings = [] } = Astro.props as Props;
---

<!-- ================= DESKTOP ================= -->
<aside class="toc-desktop">
  <!-- collapsed: mini segments -->
  <div class="toc-mini">
    {headings.map((h) => <div class="toc-bar-segment" data-id={h.slug} />)}
  </div>

  <!-- expanded: flyout -->
  <div class="toc-flyout">
    <ul>
      {headings.map((h) => (
        <li class={`level-${h.depth}`}>
          <a href={`#${h.slug}`}>{h.text}</a>
        </li>
      ))}
    </ul>
  </div>
</aside>

<!-- ================= MOBILE ================= -->
<div class="toc-mobile">
  <button id="toc-toggle" class="toc-button">â˜° Contents</button>
  <div id="toc-drawer" class="toc-drawer">
    <ul>
      {headings.map((h) => (
        <li class={`level-${h.depth}`}>
          <a href={`#${h.slug}`}>{h.text}</a>
        </li>
      ))}
    </ul>
  </div>
  <!-- Backdrop only used on mobile -->
  <div id="toc-backdrop" class="toc-backdrop"></div>
</div>

<style>
  /* ===== DESKTOP (your original) ===== */
  .toc-desktop {
    position: fixed;
    right: 1rem;
    top: 6rem;
    z-index: 100;
  }

  .toc-mini {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-md); /* more breathing room */
    padding: 4px;
    z-index: 100;
  }

  /* mini bars */
  .toc-bar-segment {
    width: 14px;
    height: 3px;
    background: var(--color-border); /* subtle inactive color */
    opacity: 1;
    border-radius: 2px;
    transition: all 0.25s ease;
  }
  .toc-bar-segment.active {
    width: 22px;
    height: 3px;
    background: var(--color-link); /* accent when active */
    box-shadow: 0 0 4px rgba(0, 102, 204, 0.25);
  }

  .toc-flyout {
    display: none;
    position: absolute;
    right: 2rem;
    top: 0;
    width: 240px;
    max-height: 80vh;
    overflow-y: auto;
    padding: 1rem;
    background: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 0.75rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    z-index: 100;
  }
  .toc-desktop:hover .toc-flyout { display: block; }

  .toc-flyout ul { list-style: none; margin: 0; padding: 0; }
  .toc-flyout li { margin: 0.25rem 0; }
  .toc-flyout a {
    display: block;
    text-decoration: none;
    color: var(--color-text-muted); /* muted default */
    font-size: 0.9rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.4rem;
    transition: background 0.2s, color 0.2s;
  }
  .toc-flyout a:hover { background: rgba(0, 102, 204, 0.08); color: var(--color-text); }
  .toc-flyout a.active { font-weight: 600; color: var(--color-link); }

  .level-3 { margin-left: 1rem; }

  /* ===== MOBILE (fixed) ===== */
  .toc-mobile { display: none; } /* hidden by default on desktop */

  @media (max-width: 900px) {
    .toc-desktop { display: none; }
    .toc-mobile { display: block; }

    .toc-button {
      position: fixed;
      bottom: 1rem;
      left: 1rem;
      z-index: 200;
      background: var(--color-border); /* subtle gray background */
      color: var(--color-text-muted);  /* muted text */
      border: none;
      border-radius: 999px;
      padding: 0.5rem 0.9rem;
      font-size: 0.85rem;
      font-weight: 500;
      box-shadow: 0 2px 6px rgba(0,0,0,0.08);
      cursor: pointer;
      transition: background 0.2s;
    }
    .toc-button:hover { background: var(--color-border-soft); color: var(--color-text); }

    .toc-drawer {
      position: fixed;
      left: 0;
      right: 0;
      bottom: -100%;
      background: var(--color-bg);
      border-top: 1px solid var(--color-border);
      border-radius: 1rem 1rem 0 0;
      max-height: 60vh;
      overflow-y: auto;
      padding: 1rem;
      transition: bottom 0.3s ease;
      z-index: 200;
    }
    .toc-drawer.open { bottom: 0; }

    .toc-drawer ul { list-style: none; padding: 0; margin: 0; }
    .toc-drawer li { margin: 0.5rem 0; }
    .toc-drawer a {
      text-decoration: none;
      color: var(--color-text-muted);
      font-size: 1rem;
      display: block;
      padding: 0.25rem 0;
      transition: color 0.2s;
    }
    .toc-drawer a:hover { color: var(--color-text); }
    .toc-drawer a.active { font-weight: 600; color: var(--color-link); }

    /* Backdrop */
    .toc-backdrop {
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.2);
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s;
      z-index: 150;
    }
    .toc-backdrop.visible { opacity: 1; pointer-events: all; }
  }
</style>

<script>
  // ===== Scroll spy (unchanged logic; matches IDs as-is) =====
  const segments = document.querySelectorAll(".toc-bar-segment");
  const links = document.querySelectorAll(".toc-flyout a, .toc-drawer a");
  const sections = document.querySelectorAll("h2[id], h3[id]");

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          segments.forEach((seg) => seg.classList.remove("active"));
          links.forEach((l) => l.classList.remove("active"));

          const id = entry.target.getAttribute("id");
          const activeSeg = document.querySelector(`.toc-bar-segment[data-id="${id}"]`);
          const activeLinks = document.querySelectorAll(`a[href="#${id}"]`);
          if (activeSeg) activeSeg.classList.add("active");
          activeLinks.forEach((a) => a.classList.add("active"));
        }
      });
    },
    { rootMargin: "0px 0px -70% 0px" }
  );
  sections.forEach((sec) => observer.observe(sec));

  // ===== Smooth scroll (fix: use getElementById for numeric-start IDs) =====
  links.forEach((link) => {
    link.addEventListener("click", (e) => {
      e.preventDefault();
      const href = link.getAttribute("href") || "";
      const id = href.startsWith("#") ? href.slice(1) : href;

      // getElementById handles IDs starting with digits
      const target = document.getElementById(id)
        // fallback if ever needed
        || (window.CSS && CSS.escape ? document.querySelector(`#${CSS.escape(id)}`) : null);

      if (target) {
        target.scrollIntoView({ behavior: "smooth" });
      }

      // Close mobile drawer/backdrop if open
      document.getElementById("toc-drawer")?.classList.remove("open");
      document.getElementById("toc-backdrop")?.classList.remove("visible");
    });
  });

  // ===== Mobile drawer + backdrop toggle =====
  const btn = document.getElementById("toc-toggle");
  const drawer = document.getElementById("toc-drawer");
  const backdrop = document.getElementById("toc-backdrop");

  if (btn && drawer && backdrop) {
    btn.addEventListener("click", () => {
      drawer.classList.toggle("open");
      backdrop.classList.toggle("visible");
    });

    backdrop.addEventListener("click", () => {
      drawer.classList.remove("open");
      backdrop.classList.remove("visible");
    });
  }
</script>

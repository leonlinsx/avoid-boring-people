---
import "../styles/global.css";
import {
  SITE_TITLE,
  SITE_DESCRIPTION,
  SITE_URL,
  SITE_OG_IMAGE,
  SITE_AUTHOR,
} from "../consts";

const {
  title,
  description,
  image,
  pubDate,
  updatedDate,
  authorName,
  ogType = "website",
  tags = [],
  canonical,
  relPrev,
  relNext,
} = Astro.props as {
  title: string;
  description?: string;
  image?: string | { src: string };
  pubDate?: Date;
  updatedDate?: Date;
  authorName?: string;
  ogType?: string;
  tags?: string[];
  canonical?: string;
  relPrev?: string;
  relNext?: string;
};

const resolveAbsoluteURL = (maybeRelative?: string) => {
  if (!maybeRelative) return undefined;
  if (maybeRelative.startsWith("http")) return maybeRelative;
  try {
    return new URL(maybeRelative, SITE_URL).toString();
  } catch (error) {
    return undefined;
  }
};

const canonicalURL =
  resolveAbsoluteURL(canonical) ?? new URL(Astro.url.pathname, SITE_URL).toString();
const prevURL = resolveAbsoluteURL(relPrev);
const nextURL = resolveAbsoluteURL(relNext);

const normalizedTags = Array.isArray(tags)
  ? tags.map((tag) => tag?.toString().trim()).filter(Boolean)
  : [];
const resolvedAuthor = authorName || SITE_AUTHOR;
const isoPubDate = pubDate instanceof Date ? pubDate.toISOString() : undefined;
const isoUpdatedDate =
  updatedDate instanceof Date
    ? updatedDate.toISOString()
    : isoPubDate;

// ✅ Resolve OG image safely
let ogImage: string;
if (image) {
  if (typeof image === "string") {
    ogImage = image.startsWith("http")
      ? image
      : new URL(image, SITE_URL).toString();
  } else if (typeof image === "object" && "src" in image) {
    ogImage = new URL(image.src, SITE_URL).toString();
  } else {
    ogImage = new URL(SITE_OG_IMAGE, SITE_URL).toString();
  }
} else {
  ogImage = new URL(SITE_OG_IMAGE, SITE_URL).toString();
}

const metaDescription = description || SITE_DESCRIPTION;
const keywordsContent =
  normalizedTags.length > 0 ? normalizedTags.join(', ') : undefined;

// ✅ Absolute URL for organization logo
const orgLogo = new URL("/logos/substack_logo.webp", SITE_URL).toString();

// ✅ Organization structured data
const orgSchema = {
  "@context": "https://schema.org",
  "@type": "Organization",
  url: SITE_URL,
  logo: orgLogo,
  name: SITE_TITLE,
};

// ✅ Article structured data (only if pubDate provided → means it's a blog post)
let articleSchema;
if (pubDate) {
  articleSchema = {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    headline: title,
    description: metaDescription,
    image: [ogImage],
    datePublished: pubDate.toISOString(),
    dateModified: (updatedDate || pubDate).toISOString(),
    author: {
      "@type": "Person",
      name: resolvedAuthor,
    },
    publisher: {
      "@type": "Organization",
      name: SITE_TITLE,
      logo: {
        "@type": "ImageObject",
        url: orgLogo,
      },
    },
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": canonicalURL,
    },
  };
}

// ✅ Merge schemas into one JSON-LD array
if (articleSchema && normalizedTags.length > 0) {
  articleSchema.keywords = normalizedTags.join(", ");
}

const structuredData = articleSchema ? [orgSchema, articleSchema] : [orgSchema];
const ogImageAlt = `Preview image for ${title}`;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="color-scheme" content="light dark" />

<!-- Performance hints for third-party scripts -->
<link rel="preconnect" href="https://www.googletagmanager.com" crossorigin />
<link rel="preconnect" href="https://www.clarity.ms" crossorigin />
<link rel="preconnect" href="https://giscus.app" crossorigin />

<!-- ✅ Preload Fonts -->
<link
  rel="preload"
  href="/fonts/atkinson-regular.woff"
  as="font"
  type="font/woff"
  crossorigin
/>

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family=Merriweather:wght@400;600;700&display=swap"
  media="print"
  onload="this.media='all'"
/>

<!-- Favicons -->
<link rel="icon" href="/favicon.ico" sizes="any" />
<link rel="icon" href={orgLogo} type="image/webp" sizes="192x192" />
<link rel="apple-touch-icon" href={orgLogo} />

<!-- Sitemap & RSS -->
<link rel="sitemap" href={new URL("sitemap-index.xml", SITE_URL).toString()} />
<link
  rel="alternate"
  type="application/rss+xml"
  title={SITE_TITLE}
  href={new URL("rss.xml", SITE_URL).toString()}
/>

<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />
{prevURL && <link rel="prev" href={prevURL} />}
{nextURL && <link rel="next" href={nextURL} />}

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={metaDescription} />
<meta name="author" content={resolvedAuthor} />
{keywordsContent && <meta name="keywords" content={keywordsContent} />}

<!-- Open Graph -->
<meta property="og:type" content={ogType} />
<meta property="og:locale" content="en_US" />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={metaDescription} />
<meta property="og:image" content={ogImage} />
<meta property="og:image:alt" content={ogImageAlt} />
<meta property="og:site_name" content={SITE_TITLE} />
{ogType === "article" && isoPubDate && (
  <meta property="article:published_time" content={isoPubDate} />
)}
{ogType === "article" && isoUpdatedDate && (
  <meta property="article:modified_time" content={isoUpdatedDate} />
)}
{ogType === "article" && (
  <meta property="article:author" content={resolvedAuthor} />
)}
{ogType === "article" &&
  normalizedTags.map((tag) => (
    <meta property="article:tag" content={tag} key={tag} />
  ))}

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:url" content={canonicalURL} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={metaDescription} />
<meta name="twitter:image" content={ogImage} />
<meta name="twitter:image:alt" content={ogImageAlt} />
<meta name="twitter:creator" content="@leonlinsx" />
<meta name="twitter:site" content="@leonlinsx" />

<!-- ✅ Combined Structured Data -->
<script is:inline type="application/ld+json">
  {JSON.stringify(structuredData)}
</script>

<!-- Microsoft Clarity -->
{import.meta.env.PROD && (
  <script is:inline type="text/javascript">
    (function(c,l,a,r,i,t,y){
        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
    })(window, document, "clarity", "script", "tegwfukh6k");
  </script>
)}

<!-- Dark Mode Initialization -->
<script is:inline>
  (function() {
    try {
      const stored = localStorage.getItem('theme');
      if (stored) {
        document.documentElement.setAttribute('data-theme', stored);
        return;
      }
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        document.documentElement.setAttribute('data-theme', 'dark');
      } else {
        document.documentElement.setAttribute('data-theme', 'light');
      }
    } catch (e) {
      document.documentElement.setAttribute('data-theme', 'light');
    }
  })();
</script>

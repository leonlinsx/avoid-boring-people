---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"a"> {
  href: string;
  currentPath?: string; // now optional; weâ€™ll fallback if omitted
}

const { href, currentPath, class: className, ...props } = Astro.props;

// Safe fallbacks
const pathRaw = (currentPath ?? Astro.url?.pathname ?? "/") as string;
const base = (import.meta.env.BASE_URL ?? "/") as string;

// Remove base from path, then ensure it starts with '/'
let pathname = pathRaw.replace(base, "");
if (!pathname.startsWith("/")) pathname = "/" + pathname;

// Top-level segment of current path and href (e.g. '/writing')
const pathTop = "/" + (pathname.split("/").filter(Boolean)[0] ?? "");
const hrefTop = "/" + (href.split("/").filter(Boolean)[0] ?? "");

// Active if exact match OR same top-level section
const isActive = pathname === href || pathTop === hrefTop;
---

<a href={href} class:list={[className, { active: isActive }]} {...props}>
  <slot />
</a>

<style>
  a {
    display: inline-block;
    text-decoration: none;
    transition: color 0.2s;
  }
  a.active {
    font-weight: 600;
    border-bottom: 2px solid var(--color-link);
    color: var(--color-link);
  }
</style>
